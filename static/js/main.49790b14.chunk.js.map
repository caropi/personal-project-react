{"version":3,"sources":["store/actions.js","components/UserInput.js","components/Profile.js","components/Card.js","components/UserEvents.js","components/Display.js","components/Headband.js","store/reducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["setErrorMessage","err","type","error","mapDispatchToProps","setLoggedIn","loggedIn","handleChange","e","userInputValue","target","value","logUser","dispatch","fetch","concat","then","res","json","userInfo","catch","connect","state","props","react_default","a","createElement","Fragment","htmlFor","name","onChange","placeholder","onClick","className","Profile","src","this","userData","actor","avatar_url","alt","login","role","aria-label","href","url","Component","Card","key","eventKey","viewBox","version","width","height","aria-hidden","fillRule","d","spanClass","action","prTitle","pull_request","title","UserEvents","status","_this","filter","events","payload","map","data","i","components_Card","id","handleStatus","repo","Display","length","Profile_Profile","setLoggedOut","components_UserInput","isLoggedIn","isloggedIn","UserEvents_UserEvents","Headband","initialState","reducer","arguments","undefined","Object","objectSpread","store","createStore","applyMiddleware","thunk","App","es","components_Headband","components_Display","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAUeA,EAAkB,SAACC,GAAD,MAAU,CACrCC,KAAM,oBACNC,MAAOF,ICiBPG,EAAqB,CACzBC,YD9B2B,iBAAO,CAC9BH,KAAM,gBACNI,UAAW,IC6BfC,aDF4B,SAACC,GAAD,MAAQ,CAClCN,KAAM,gBACNO,eAAgBD,EAAEE,OAAOC,QCC3BC,QDZuB,SAACH,GAAD,OAAoB,SAACI,GAC1CC,MAAK,gCAAAC,OAAiCN,EAAjC,YACFO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAIJ,EARwB,CACrCX,KAAM,kBACNiB,SAMkCF,MACjCG,MAAM,SAAAnB,GACLY,EAASb,EAAgBC,SCUlBoB,cAXS,SAACC,GAAD,MAAY,CAClChB,SAAUgB,EAAMhB,SAChBG,eAAgBa,EAAMb,iBASgBL,EAAzBiB,CA9BG,SAACE,GAIjB,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,YAAf,0BAGAJ,EAAAC,EAAAC,cAAA,SACExB,KAAK,OACL2B,KAAK,WACLlB,MAAOY,EAAMZ,MACbmB,SAAU,SAACtB,GAAD,OAAOe,EAAMhB,aAAaC,IACpCuB,YAAY,+BACdP,EAAAC,EAAAC,cAAA,UAAQM,QAAS,WAAOT,EAAMlB,cAblCkB,EAAMX,QAAQW,EAAMd,iBAa0CwB,UAAU,iBAApE,YClBaC,iLACVX,GACH,OACEC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,0BACbT,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,KAAKb,MAAMc,SAAS,GAAGC,MAAMC,WAAYC,IAAKJ,KAAKb,MAAMc,SAAS,GAAGC,MAAMG,QACjFjB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,qBAA5B,gBAAJ,SAAmEnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAMR,KAAKb,MAAMc,SAAS,GAAGC,MAAMO,IAAKZ,UAAU,+BAA+BG,KAAKb,MAAMc,SAAS,GAAGC,MAAMG,gBAL/JK,aCctBC,EAdF,SAACxB,GACZ,OACEC,EAAAC,EAAAC,cAAA,MAAIsB,IAAKzB,EAAM0B,UACbzB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,sCAAsCiB,QAAQ,YAAYC,QAAQ,MAAMC,MAAM,KAAKC,OAAO,KAAKC,cAAY,QAAO9B,EAAAC,EAAAC,cAAA,QAAM6B,SAAS,UAAUC,EAAE,qMAC5JhC,EAAAC,EAAAC,cAAA,QAAMO,UAAU,aAA4B,cAAfV,EAAMrB,KAAsB,cAAgB,gBACzEsB,EAAAC,EAAAC,cAAA,QAAMO,UAAWV,EAAMkC,WAAYlC,EAAMmC,SAE3ClC,EAAAC,EAAAC,cAAA,KAAGkB,KAAI,sBAAA7B,OAAwBQ,EAAMM,MAAQI,UAAU,aAAaV,EAAMM,MACzD,qBAAfN,EAAMrB,MAA+BsB,EAAAC,EAAAC,cAAA,SAAIH,EAAMoC,QAAQC,aAAaC,SCRvDC,uLAENC,GACX,MAAe,WAAXA,EACK,iBACa,WAAXA,EACF,iBACa,YAAXA,EACF,cADF,iCAIFxC,GAAO,IAAAyC,EAAA5B,KACZ,OACEZ,EAAAC,EAAAC,cAAA,UACGU,KAAKb,MAAMc,SACX4B,OAAO,SAAAC,GACN,MAAyB,qBAAhBA,EAAOhE,OAA2D,WAA1BgE,EAAOC,QAAQT,QAAiD,WAA1BQ,EAAOC,QAAQT,UACvGU,IAAI,SAACC,EAAMC,GACV,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,CACGvB,IAAKqB,EAAKG,GACVtE,KAAMmE,EAAKnE,KACXuD,UAAWO,EAAKS,aAAaJ,EAAKF,QAAQT,QAC1CA,OAAQW,EAAKF,QAAQT,OACrB7B,KAAMwC,EAAKK,KAAK7C,KAChB8B,QAASU,EAAKF,YAGzB/B,KAAKb,MAAMc,SACX4B,OAAO,SAAAC,GAAM,MAAoB,cAAhBA,EAAOhE,OACxBkE,IAAI,SAACC,GACJ,OAAO7C,EAAAC,EAAAC,cAAC6C,EAAD,CACGvB,IAAKqB,EAAKG,GACVtE,KAAMmE,EAAKnE,KACXuD,UAAWO,EAAKS,aAAaJ,EAAKF,QAAQT,QAC1CA,OAAQW,EAAKF,QAAQT,OACrB7B,KAAMwC,EAAKK,KAAK7C,KAChB8B,QAASU,EAAKF,oBApCMrB,aCIlC6B,iLACMpD,GAAO,IAAAyC,EAAA5B,KACX,OACIZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACXT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,kBACTG,KAAKb,MAAMJ,SAASyD,OAAS,GAAKxC,KAAKb,MAAMjB,UAC/CkB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBACXT,EAAAC,EAAAC,cAACmD,EAAD,CAASxC,SAAUD,KAAKb,MAAMJ,YAGjCiB,KAAKb,MAAMjB,SACZkB,EAAAC,EAAAC,cAAA,UAAQO,UAAU,gBAAgBD,QAAS,WAAOgC,EAAKzC,MAAMuD,iBAA7D,UACAtD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,6BACXT,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,yBACXT,EAAAC,EAAAC,cAACqD,EAAD,CACIC,WAAY5C,KAAKb,MAAM0D,WACvB9E,MAAOiC,KAAKb,MAAMpB,MAClBQ,MAAOyB,KAAKb,MAAMd,eAClBqB,SAAUM,KAAK7B,aACfyB,QAAWI,KAAKxB,aAM9BwB,KAAKb,MAAMJ,SAASyD,OAAS,GAAKxC,KAAKb,MAAMjB,UAC3CkB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,oBACPT,EAAAC,EAAAC,cAACwD,EAAD,CAAY7C,SAAUD,KAAKb,MAAMJ,oBA5BvC2B,aA0ChB1C,EAAqB,CACvB0E,aL7C0B,iBAAO,CAC/B5E,KAAM,iBACNI,UAAU,IK4CZN,mBAGWqB,cAXS,SAACC,GAAD,MAAY,CAChChB,SAAUgB,EAAMhB,SAChBH,MAAOmB,EAAMnB,MACbgB,SAASG,EAAMH,WAQqBf,EAAzBiB,CAA6CsD,GCxC7CQ,EAZE,SAAC5D,GAChB,OACEC,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cACdT,EAAAC,EAAAC,cAAA,OAAKO,UAAY,QACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cAAcE,IAAM,mBACnCK,IAAM,wBACNhB,EAAAC,EAAAC,cAAA,uDCRN0D,EAAe,CACjB9E,UAAU,EACVH,MAAO,GACPM,eAAgB,GAChBU,SAAU,IAcCkE,EAXC,WAAkC,IAAjC/D,EAAiCgE,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,EAAc1B,EAAW4B,UAAAV,OAAA,EAAAU,UAAA,QAAAC,EAC1C,OAAQ7B,EAAOxD,MACX,IAAK,gBACL,IAAK,iBAAkB,OAAOsF,OAAAC,EAAA,EAAAD,CAAA,GAAKlE,EAAZ,CAAmBhB,SAAUoD,EAAOpD,WAC3D,IAAK,oBAAqB,OAAAkF,OAAAC,EAAA,EAAAD,CAAA,GAAWlE,EAAX,CAAkBnB,MAAOuD,EAAOvD,QAC1D,IAAK,kBAAmB,OAAAqF,OAAAC,EAAA,EAAAD,CAAA,GAAWlE,EAAX,CAAkBH,SAAUuC,EAAOvC,WAC3D,IAAK,gBAAiB,OAAAqE,OAAAC,EAAA,EAAAD,CAAA,GAAWlE,EAAX,CAAkBb,eAAgBiD,EAAOjD,iBAC/D,QAAS,OAAOa,YCRboE,EAFDC,YAAYN,EAASO,YAAgBC,MCoBpCC,mLAdX,OACEtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAUL,MAAOA,GACflE,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACsE,EAAD,MACAxE,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuE,EAAD,gBAPMC,IAAMpD,WCIJqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACDjF,EAAAC,EAAAC,cAACgF,EAAD,MACNC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/F,KAAK,SAAAgG,GACjCA,EAAaC","file":"static/js/main.49790b14.chunk.js","sourcesContent":["  export const setLoggedIn = () => ({\n      type: 'SET_LOGGED_IN',\n      loggedIn:  true\n    })\n\n  export const setLoggedOut = () => ({\n      type: 'SET_LOGGED_OUT',\n      loggedIn: false\n    })\n\n  export const setErrorMessage = (err) => ({\n      type: 'SET_ERROR_MESSAGE',\n      error: err\n    })\n\n  export const setUserData = (results) => ({\n      type: 'POPULATE_EVENTS',\n      userInfo: results\n  })\n\n  export const logUser = (userInputValue) => (dispatch) => {\n    fetch(`https://api.github.com/users/${userInputValue}/events`)\n      .then(res => res.json())\n      .then(res => dispatch(setUserData(res)))\n      .catch(err => {\n        dispatch(setErrorMessage(err))\n      })\n  }\n    \n  export const handleChange = (e) => ({\n    type: 'HANDLE_CHANGE',\n    userInputValue: e.target.value\n  })","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setLoggedIn, handleChange, logUser } from '../store/actions.js';\n\n\nconst UserInput = (props) => {\n  const onSubmit = () => {\n    props.logUser(props.userInputValue)\n  }\n  return (\n      <> \n        <label htmlFor=\"userName\">\n          Enter Github User Name\n        </label>\n        <input \n          type=\"text\" \n          name=\"userName\" \n          value={props.value} \n          onChange={(e) => props.handleChange(e)} \n          placeholder=\"Your Github user name here\" />\n        <button onClick={() => {props.setLoggedIn(); onSubmit()}} className=\"input__button\">Login</button>\n      </>\n  )\n}\nconst mapStateToProps = (state) => ({\n  loggedIn: state.loggedIn,\n  userInputValue: state.userInputValue\n})\n\nconst mapDispatchToProps = {\n  setLoggedIn,\n  handleChange,\n  logUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInput);","import React, { Component } from 'react'\n\nexport default class Profile extends Component {\n    render(props) {\n        return (\n          <div className=\"display__user--profile\">\n            <img src={this.props.userData[0].actor.avatar_url} alt={this.props.userData[0].actor.login}/>\n                <h2><span role=\"img\" aria-label=\"waving hand emoji\">ðŸ‘‹</span>Hello <a href={this.props.userData[0].actor.url} className=\"display__user--profile-name\">{this.props.userData[0].actor.login}</a></h2>\n          </div>\n        )\n    }\n  }\n","import React from 'react'\n\nconst Card = (props) => {\n  return (\n    <li key={props.eventKey}>\n      <h4>\n        <svg className=\"octicon octicon-repo mr-2 text-gray\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"12\" height=\"16\" aria-hidden=\"true\"><path fillRule=\"evenodd\" d=\"M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z\"></path></svg>\n        <span className=\"eventType\">{props.type === 'ForkEvent'? 'Forked Repo' : 'Pull Request'}</span>\n        <span className={props.spanClass}>{props.action}</span>\n      </h4>\n      <a href={`https://github.com/${props.name}`} className=\"repo-link\">{props.name}</a>\n      { props.type === 'PullRequestEvent' && <p>{props.prTitle.pull_request.title}</p>}\n    </li>\n  )\n} \n\nexport default Card\n\n","import React, { Component } from 'react';\nimport Card from './Card.js';\n\nexport default class UserEvents extends Component {\n  // handles local logic of changing className based on whether a status is opened or closed\n  handleStatus(status) {\n    if (status === 'opened') {\n      return 'status__opened'\n    } else if (status === 'closed') {\n      return 'status__closed'\n    } else if (status === 'created' && 'started') {\n      return 'status'\n    }\n  }\n  render(props) {\n    return (\n      <ul>\n        {this.props.userData\n        .filter(events => {\n          return ((events.type === 'PullRequestEvent') && (events.payload.action === 'closed' || events.payload.action === 'opened'))})\n        .map((data, i) => {\n          return <Card \n                    key={data.id}\n                    type={data.type}\n                    spanClass={this.handleStatus(data.payload.action)}\n                    action={data.payload.action}\n                    name={data.repo.name}\n                    prTitle={data.payload}\n                    />\n        })} \n        {this.props.userData\n        .filter(events => events.type === 'ForkEvent')\n        .map((data) => {\n          return <Card \n                    key={data.id}\n                    type={data.type}\n                    spanClass={this.handleStatus(data.payload.action)}\n                    action={data.payload.action}\n                    name={data.repo.name}\n                    prTitle={data.payload}\n                    />\n        })} \n      </ul>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UserInput from \"./UserInput.js\"\nimport Profile from \"./Profile.js\"\nimport UserEvents from \"./UserEvents.js\"\nimport { setLoggedOut, setErrorMessage } from '../store/actions.js';\n\nclass Display extends Component {\n    render (props) {\n        return (\n            <div className=\"display\">            \n                <div className=\"display__login\">\n                    {(this.props.userInfo.length > 0 && this.props.loggedIn) && \n                    <div className=\"display__user\">\n                        <Profile userData={this.props.userInfo}/>         \n                    </div>\n                    }\n                    {this.props.loggedIn ? \n                    <button className=\"input__button\" onClick={() => {this.props.setLoggedOut()}}>Logout</button> :\n                    <div className=\"display__login--container\">\n                        <h2>Log Into Github Account</h2>\n                        <div className=\"display__login--input\">\n                            <UserInput \n                                isLoggedIn={this.props.isloggedIn} \n                                error={this.props.error} \n                                value={this.props.userInputValue}\n                                onChange={this.handleChange}\n                                onClick = {this.logUser}\n                            />\n                        </div>\n                    </div>\n                    }\n                </div>\n                {(this.props.userInfo.length > 0 && this.props.loggedIn) &&\n                    <div className=\"display__results\">\n                            <UserEvents userData={this.props.userInfo}/>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    loggedIn: state.loggedIn,\n    error: state.error,\n    userInfo:state.userInfo\n})\n\nconst mapDispatchToProps = {\n    setLoggedOut,\n    setErrorMessage\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Display);\n","import React from 'react'\n\nconst Headband = (props) => {\n  return (\n    <header className=\"App-header\">\n        <div className = \"logo\" >\n            <img className=\"logo__image\" src = \"/assets/logo.png\"\n            alt = \"Github Logo Octocat\" />\n            <h1> Github Scratching Post </h1> \n        </div> \n    </header>\n  )\n}\n\nexport default Headband\n","const initialState = {\n    loggedIn: false,\n    error: '',\n    userInputValue: \"\",\n    userInfo: [],\n}\n\nconst reducer = (state = initialState, action) => {\n        switch (action.type) {\n            case 'SET_LOGGED_IN': return { ...state, loggedIn: action.loggedIn };\n            case 'SET_LOGGED_OUT': return { ...state, loggedIn: action.loggedIn };\n            case 'SET_ERROR_MESSAGE': return{ ...state, error: action.error };\n            case 'POPULATE_EVENTS': return{ ...state, userInfo: action.userInfo };\n            case 'HANDLE_CHANGE': return{ ...state, userInputValue: action.userInputValue }\n            default: return state;\n        }\n\n    }\nexport default reducer","import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport Display from './components/Display.js';\nimport Headband from './components/Headband.js';\nimport { Provider } from 'react-redux';\nimport store from './store/store.js';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Headband/>\n          <main>\n            <Display \n            />\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}